import * as G from '../constants/GameConstants'
import seedrandom from 'seedrandom'
import _ from 'lodash'

/**
 * Creates an array of objects representing game grid.
 *
 * @param      {number}                 xSize   The x size
 * @param      {number}                 ySize   The y size
 * @return     {Array.<Object>}         Array of cells
 */
export const createGameGrid = (xSize = G.GRID_X_SIZE, ySize = G.GRID_Y_SIZE) => {
  const grid = []
  for (let x = 0; x < xSize; x++) {
    for (let y = 0; y < ySize; y++) {
      grid.push({
        active: false,
        x: x,
        y: y
      })
    }
  }
  return grid
}

/**
 * Finds siblings of a provided cell by its coords.
 *
 * @param      {Object}                 coords  The coordinates of an origin cell
 * @param      {Object}                 state   Game state
 * @return     {Array.<Object>}                 The array of siblings coordinates
 */
export const findSiblings = (coords, state) => {
  const middle = coords
  const left   = {x: coords.x - 1, y: coords.y}
  const right  = {x: coords.x + 1, y: coords.y}
  const top    = {x: coords.x, y: coords.y - 1}
  const bottom = {x: coords.x, y: coords.y + 1}

  return [left, right, middle, top, bottom]

}

/**
 * Returns the number in provided range generated by seed.
 *
 * @param      {number}           lower   The lower number of the range
 * @param      {number}           upper   The upper number of the range
 * @param      {string}           seed    The seed to be used to generate the number
 * @return     {number}                   The generated number in range by seed.
 */
export const getNumberInRangeBySeed = (lower, upper, seed = 'ABC') => {
  var num = Math.floor(seedrandom(seed)() * (upper-lower+1) + lower)
  return num
}

/**
 * Returns the grid cell coordinates generated by seed.
 *
 * @param      {string}  seed    The seed
 * @return     {Object}          The generated grid cell coordinates by seed.
 */
export const getGridCellCoordsBySeed = (seed) => {
  const x = getNumberInRangeBySeed(0, G.GRID_X_SIZE - 1, seed + 'x')
  const y = getNumberInRangeBySeed(0, G.GRID_Y_SIZE - 1, seed + 'y')
  return {x, y}
}

/**
 * Calculates the percent value.
 *
 * @param      {number}  num     The base number
 * @param      {number}  total   The total number
 * @return     {number}          The calculated percent value
 */
export const calculatePercent = (num, total) => Math.round((num / total) * 100)
